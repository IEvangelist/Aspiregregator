@inject ISourceProvider sourceProvider
@inject NavMenuViewModel viewModel
@rendermode InteractiveServer

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="false" Width="250" Title="Navigation menu" @bind-Expanded="viewModel.Expanded" CustomToggle="true">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Recent</FluentNavLink>
            @if (viewModel.Sources is not null)
            {
                @foreach (var source in viewModel.Sources)
                {
                    if (!string.IsNullOrEmpty(source.Name))
                    {
                        <FluentNavLink Href="@string.Format($"entries/{source.GetSlug()}")" Icon="@(new Icons.Regular.Size20.Book())" IconColor="Color.Accent">@source.Name</FluentNavLink>
                    }
                }
            }
        </FluentNavMenu>
    </nav>
</div>

@code {
    protected override async Task OnInitializedAsync() 
        => await viewModel.RefreshSources();

    internal async Task RefreshSources()
    {
        await viewModel.RefreshSources();
        await InvokeAsync(StateHasChanged);
    }
}
